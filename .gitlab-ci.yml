# This file is a template, and might need editing before it works on your project.
---
# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
#
# This template will build and test your projects as well as create the documentation.
#
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.
# * Shows how to use multiple jobs in test stage for verifying functionality
#   with multiple JDKs.
# * Uses site:stage to collect the documentation for multi-module projects.
# * Publishes the documentation for `master` branch.

stages:
  - build
  - deploy
  
build:
  image: maven:3.6-jdk-11-slim
  stage: build
  variables:
    # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
    # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
    # when running from the command line.
    # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
    MAVEN_CLI_OPTS: "-s ci/settings.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -Pprd"
  # Cache downloaded dependencies and plugins between builds.
  # To keep cache across branches add 'key: "$CI_JOB_NAME"'
  cache:
    paths:
      - .m2/repository
      - workspace/sica-parent/target/
      - workspace/driver-sensores/target/
  script:
    - mvn $MAVEN_CLI_OPTS clean install -f workspace/sica-parent/pom.xml -B -U
    - mvn $MAVEN_CLI_OPTS clean install -f workspace/driver-sensores/pom.xml -B -U
    - mvn $MAVEN_CLI_OPTS clean package -f workspace/sica-ativos/pom.xml -B -U
    - mvn $MAVEN_CLI_OPTS clean package -f workspace/sica-monitoramento/pom.xml -B -U
    - mvn $MAVEN_CLI_OPTS clean package -f workspace/sica-seguranca/pom.xml -B -U
    - mvn $MAVEN_CLI_OPTS clean package -f workspace/sica-portal-web/pom.xml -B -U
    # - docker build --tag $CONTAINER_IMAGE:latest --file Dockerfile-full .
  artifacts:
    paths:
      - workspace/**/target/*.jar
docker:
  image: docker:stable
  stage: deploy
  variables:
    # When using dind service we need to instruct docker, to talk with the
    # daemon started inside of the service. The daemon is available with
    # a network connection instead of the default /var/run/docker.sock socket.
    #
    # The 'docker' hostname is the alias of the service container as described at
    # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
    #
    # Note that if you're using Kubernetes executor, the variable should be set to
    # tcp://localhost:2375 because of how Kubernetes executor connects services
    # to the job container
    DOCKER_HOST: tcp://docker:2375/
    # When using dind, it's wise to use the overlayfs driver for
    # improved performance.
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - docker --version
    - echo $DOCKER_REGISTRY_PASSWORD | docker login $DOCKER_REGISTRY -u $GITLAB_USER_LOGIN --password-stdin
    - export NAMESPACE="$(echo "${CI_PROJECT_NAMESPACE}" | tr A-Z a-z)"
    - export CONTAINER_IMAGE_BASE=${DOCKER_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}
  script:
    - docker pull $CONTAINER_IMAGE_BASE/sica-ativos:latest || true
    - docker build --cache-from $CONTAINER_IMAGE_BASE/sica-ativos:latest --tag $CONTAINER_IMAGE_BASE/sica-ativos:latest --file workspace/sica-ativos/Dockerfile .
    - docker push $CONTAINER_IMAGE_BASE/sica-ativos:latest
    - docker pull $CONTAINER_IMAGE_BASE/sica-monitoramento:latest || true
    - docker build --cache-from $CONTAINER_IMAGE_BASE/sica-monitoramento:latest --tag $CONTAINER_IMAGE_BASE/sica-monitoramento:latest --file workspace/sica-monitoramento/Dockerfile .
    - docker push $CONTAINER_IMAGE_BASE/sica-monitoramento:latest
    - docker pull $CONTAINER_IMAGE_BASE/sica-seguranca:latest || true
    - docker build --cache-from $CONTAINER_IMAGE_BASE/sica-seguranca:latest --tag $CONTAINER_IMAGE_BASE/sica-seguranca:latest --file workspace/sica-seguranca/Dockerfile .
    - docker push $CONTAINER_IMAGE_BASE/sica-seguranca:latest
  only:
    - master
